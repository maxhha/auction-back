// This file was generated by gormdbopsgen. DO NOT EDIT.
package database

import (
	"auction-back/models"
	"auction-back/ports"
	"fmt"
)

type bankDB struct{ *Database }

func (d *Database) Bank() ports.BankDB { return &bankDB{d} }

func (d *bankDB) Get(id string) (models.Bank, error) {
	obj := Bank{}
	if err := d.db.Take(&obj, "id = ?", id).Error; err != nil {
		return models.Bank{}, fmt.Errorf("take: %w", convertError(err))
	}

	return obj.into(), nil
}

func (d *bankDB) Take(config ports.BankTakeConfig) (models.Bank, error) {
	query := d.filter(d.db, config.Filter)

	obj := Bank{}
	if err := query.Take(&obj).Error; err != nil {
		return models.Bank{}, fmt.Errorf("take: %w", convertError(err))
	}

	return obj.into(), nil
}

func (d *bankDB) Create(bank *models.Bank) error {
	if bank == nil {
		return ports.ErrBankIsNil
	}
	obj := Bank{}
	obj.copy(bank)
	if err := d.db.Create(&obj).Error; err != nil {
		return fmt.Errorf("create: %w", convertError(err))
	}

	*bank = obj.into()
	return nil
}

func (d *bankDB) Update(bank *models.Bank) error {
	if bank == nil {
		return ports.ErrBankIsNil
	}

	obj := Bank{}
	obj.copy(bank)

	if err := d.db.Save(&obj).Error; err != nil {
		return fmt.Errorf("save: %w", convertError(err))
	}
	*bank = obj.into()

	return nil
}

func (d *bankDB) Pagination(first *int, after *string, filter *models.BanksFilter) (models.BanksConnection, error) {
	query := d.filter(d.db.Model(&Bank{}), filter)
	query, err := paginationQueryByCreatedAtDesc(query, first, after)
	if err != nil {
		return models.BanksConnection{}, fmt.Errorf("pagination: %w", err)
	}

	var objs []Bank
	if err := query.Find(&objs).Error; err != nil {
		return models.BanksConnection{}, fmt.Errorf("find: %w", err)
	}

	if len(objs) == 0 {
		return models.BanksConnection{
			PageInfo: &models.PageInfo{},
			Edges:    make([]*models.BanksConnectionEdge, 0),
		}, nil
	}

	hasNextPage := false

	if first != nil {
		hasNextPage = len(objs) > *first
		objs = objs[:len(objs)-1]
	}

	edges := make([]*models.BanksConnectionEdge, 0, len(objs))

	for _, obj := range objs {
		node := obj.into()

		edges = append(edges, &models.BanksConnectionEdge{
			Cursor: fmt.Sprintf("%v", node.ID),
			Node:   &node,
		})
	}

	startCursor := fmt.Sprintf("%v", objs[0].ID)
	endCursor := fmt.Sprintf("%v", objs[len(objs)-1].ID)

	return models.BanksConnection{
		PageInfo: &models.PageInfo{
			HasNextPage: hasNextPage,
			StartCursor: &startCursor,
			EndCursor:   &endCursor,
		},
		Edges: edges,
	}, nil
}
