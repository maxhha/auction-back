// This file was generated by portmocksgen. DO NOT EDIT.
package ports

import (
	"auction-back/models"
	"github.com/stretchr/testify/mock"
)

type AccountDBMock struct{ mock.Mock }

type BankDBMock struct{ mock.Mock }

type DBMock struct {
	AccountMock  AccountDBMock
	BankMock     BankDBMock
	ProductMock  ProductDBMock
	RoleMock     RoleDBMock
	TokenMock    TokenDBMock
	UserMock     UserDBMock
	UserFormMock UserFormDBMock
}

type ProductDBMock struct{ mock.Mock }

type RoleDBMock struct{ mock.Mock }

type TokenDBMock struct{ mock.Mock }

type UserDBMock struct{ mock.Mock }

type UserFormDBMock struct{ mock.Mock }

func (m *AccountDBMock) Create(account *models.Account) error {
	args := m.Called(account)
	return args.Error(0)
}

func (m *AccountDBMock) Pagination(config AccountPaginationConfig) (models.AccountsConnection, error) {
	args := m.Called(config)
	return args.Get(0).(models.AccountsConnection), args.Error(1)
}

func (m *AccountDBMock) Take(config AccountTakeConfig) (models.Account, error) {
	args := m.Called(config)
	return args.Get(0).(models.Account), args.Error(1)
}

func (m *AccountDBMock) UserPagination(config AccountPaginationConfig) (models.UserAccountsConnection, error) {
	args := m.Called(config)
	return args.Get(0).(models.UserAccountsConnection), args.Error(1)
}

func (m *BankDBMock) Get(id string) (models.Bank, error) {
	args := m.Called(id)
	return args.Get(0).(models.Bank), args.Error(1)
}

func (m *BankDBMock) GetAccount(bank models.Bank) (models.BankAccount, error) {
	args := m.Called(bank)
	return args.Get(0).(models.BankAccount), args.Error(1)
}

func (m *BankDBMock) Take(config BankTakeConfig) (models.Bank, error) {
	args := m.Called(config)
	return args.Get(0).(models.Bank), args.Error(1)
}

func (m *DBMock) Account() AccountDB {
	return &m.AccountMock
}

func (m *DBMock) Bank() BankDB {
	return &m.BankMock
}

func (m *DBMock) Product() ProductDB {
	return &m.ProductMock
}

func (m *DBMock) Role() RoleDB {
	return &m.RoleMock
}

func (m *DBMock) Token() TokenDB {
	return &m.TokenMock
}

func (m *DBMock) User() UserDB {
	return &m.UserMock
}

func (m *DBMock) UserForm() UserFormDB {
	return &m.UserFormMock
}

func (m *ProductDBMock) Create(product *models.Product) error {
	args := m.Called(product)
	return args.Error(0)
}

func (m *ProductDBMock) GetCreator(product models.Product) (models.User, error) {
	args := m.Called(product)
	return args.Get(0).(models.User), args.Error(1)
}

func (m *ProductDBMock) GetOwner(product models.Product) (models.User, error) {
	args := m.Called(product)
	return args.Get(0).(models.User), args.Error(1)
}

func (m *ProductDBMock) Pagination(config ProductPaginationConfig) (models.ProductsConnection, error) {
	args := m.Called(config)
	return args.Get(0).(models.ProductsConnection), args.Error(1)
}

func (m *RoleDBMock) Find(config RoleFindConfig) ([]models.Role, error) {
	args := m.Called(config)
	return args.Get(0).([]models.Role), args.Error(1)
}

func (m *TokenDBMock) Create(token *models.Token) error {
	args := m.Called(token)
	return args.Error(0)
}

func (m *TokenDBMock) GetUser(token models.Token) (models.User, error) {
	args := m.Called(token)
	return args.Get(0).(models.User), args.Error(1)
}

func (m *TokenDBMock) Take(config TokenTakeConfig) (models.Token, error) {
	args := m.Called(config)
	return args.Get(0).(models.Token), args.Error(1)
}

func (m *TokenDBMock) Update(token *models.Token) error {
	args := m.Called(token)
	return args.Error(0)
}

func (m *UserDBMock) Create(user *models.User) error {
	args := m.Called(user)
	return args.Error(0)
}

func (m *UserDBMock) Get(id string) (models.User, error) {
	args := m.Called(id)
	return args.Get(0).(models.User), args.Error(1)
}

func (m *UserDBMock) LastApprovedUserForm(user models.User) (models.UserForm, error) {
	args := m.Called(user)
	return args.Get(0).(models.UserForm), args.Error(1)
}

func (m *UserDBMock) MostRelevantUserForm(user models.User) (models.UserForm, error) {
	args := m.Called(user)
	return args.Get(0).(models.UserForm), args.Error(1)
}

func (m *UserDBMock) Pagination(config UserPaginationConfig) (models.UsersConnection, error) {
	args := m.Called(config)
	return args.Get(0).(models.UsersConnection), args.Error(1)
}

func (m *UserFormDBMock) Create(form *models.UserForm) error {
	args := m.Called(form)
	return args.Error(0)
}

func (m *UserFormDBMock) Get(id string) (models.UserForm, error) {
	args := m.Called(id)
	return args.Get(0).(models.UserForm), args.Error(1)
}

func (m *UserFormDBMock) GetLoginForm(input models.LoginInput) (models.UserForm, error) {
	args := m.Called(input)
	return args.Get(0).(models.UserForm), args.Error(1)
}

func (m *UserFormDBMock) Pagination(config UserFormPaginationConfig) (models.UserFormsConnection, error) {
	args := m.Called(config)
	return args.Get(0).(models.UserFormsConnection), args.Error(1)
}

func (m *UserFormDBMock) Take(config UserFormTakeConfig) (models.UserForm, error) {
	args := m.Called(config)
	return args.Get(0).(models.UserForm), args.Error(1)
}

func (m *UserFormDBMock) Update(form *models.UserForm) error {
	args := m.Called(form)
	return args.Error(0)
}
