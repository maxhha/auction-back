// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"auction-back/db"
	"fmt"
	"io"
	"strconv"
	"time"
)

// Nominal account
type Account interface {
	IsAccount()
}

type AccountsConnection struct {
	PageInfo *PageInfo                 `json:"pageInfo"`
	Edges    []*AccountsConnectionEdge `json:"edges"`
}

type AccountsConnectionEdge struct {
	Cursor string  `json:"cursor"`
	Node   Account `json:"node"`
}

type ApproveUserFormInput struct {
	UserFormID string `json:"userFormId"`
}

type CreateOfferInput struct {
	ProductID string  `json:"productId"`
	Amount    float64 `json:"amount"`
}

type CreateOfferResult struct {
	Offer *Offer `json:"offer"`
}

type CreateProductInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

type DateTimeRange struct {
	From *time.Time `json:"from"`
	To   *time.Time `json:"to"`
}

type DeclineUserFormInput struct {
	UserFormID    string  `json:"userFormId"`
	DeclainReason *string `json:"declainReason"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// Ðœoney in a specific currency
type Money struct {
	Amount   float64      `json:"amount"`
	Currency CurrencyEnum `json:"currency"`
}

type OfferProductInput struct {
	ProductID string `json:"productId"`
}

type OfferProductResult struct {
	Product *db.Product `json:"product"`
}

type OffersConnection struct {
	PageInfo *PageInfo               `json:"pageInfo"`
	Edges    []*OffersConnectionEdge `json:"edges"`
}

type OffersConnectionEdge struct {
	Cursor string `json:"cursor"`
	Node   *Offer `json:"node"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

// Product image
type ProductImage struct {
	ID       string `json:"id"`
	Filename string `json:"filename"`
	Path     string `json:"path"`
}

type ProductResult struct {
	Product *db.Product `json:"product"`
}

type ProductsConnection struct {
	PageInfo *PageInfo                 `json:"pageInfo"`
	Edges    []*ProductsConnectionEdge `json:"edges"`
}

type ProductsConnectionEdge struct {
	Cursor string      `json:"cursor"`
	Node   *db.Product `json:"node"`
}

type RemoveOfferInput struct {
	OfferID string `json:"offerId"`
}

type RemoveOfferResult struct {
	Status string `json:"status"`
}

type RequestSetUserEmailInput struct {
	Email string `json:"email"`
}

type RequestSetUserPhoneInput struct {
	Phone string `json:"phone"`
}

type SellProductInput struct {
	ProductID string `json:"productId"`
}

type SellProductResult struct {
	Product *db.Product `json:"product"`
}

type TakeOffProductInput struct {
	ProductID string `json:"productId"`
}

type TakeOffProductResult struct {
	Product *db.Product `json:"product"`
}

// Used for actions activation
type TokenInput struct {
	Token string `json:"token"`
}

// Used for login and registration
type TokenResult struct {
	Token string `json:"token"`
}

type Transaction struct {
	ID string `json:"id"`
	// Time of apply this transaction
	Date *time.Time `json:"date"`
	// Current state
	State TransactionStateEnum `json:"state"`
	// Transaction type
	Type TransactionTypeEnum `json:"type"`
	// Transaction currency
	Currency CurrencyEnum `json:"currency"`
	// Transaction amount
	Amount float64 `json:"amount"`
	// Error message for state = ERROR or FAILED
	Error *string `json:"error"`
	// Offer for type = BUY
	Offer *Offer `json:"offer"`
	// From account
	AccountFrom Account `json:"accountFrom"`
	// To account
	AccountTo Account `json:"accountTo"`
}

type TransactionsConnection struct {
	PageInfo *PageInfo                     `json:"pageInfo"`
	Edges    []*TransactionsConnectionEdge `json:"edges"`
}

type TransactionsConnectionEdge struct {
	Cursor string       `json:"cursor"`
	Node   *Transaction `json:"node"`
}

type UpdateUserDraftFormInput struct {
	Name *string `json:"name"`
}

type UpdateUserPasswordInput struct {
	OldPassword *string `json:"oldPassword"`
	Password    string  `json:"password"`
}

type UserAccountsConnection struct {
	PageInfo *PageInfo                     `json:"pageInfo"`
	Edges    []*UserAccountsConnectionEdge `json:"edges"`
}

// Connection with UserAccount only
type UserAccountsConnectionEdge struct {
	Cursor string       `json:"cursor"`
	Node   *UserAccount `json:"node"`
}

// UserFrom with all required fields filled in
type UserFormFilled struct {
	// User email
	Email string `json:"email"`
	// User phone
	Phone string `json:"phone"`
	// User name
	Name string `json:"name"`
}

type UserFormHistoryFilter struct {
	State []UserFormStateEnum `json:"state"`
	ID    []string            `json:"id"`
}

type UserFormResult struct {
	UserForm *db.UserForm `json:"userForm"`
}

type UserFormsConnection struct {
	PageInfo *PageInfo                  `json:"pageInfo"`
	Edges    []*UserFormsConnectionEdge `json:"edges"`
}

type UserFormsConnectionEdge struct {
	Cursor string       `json:"cursor"`
	Node   *db.UserForm `json:"node"`
}

type UserFormsFilter struct {
	State  []UserFormStateEnum `json:"state"`
	ID     []string            `json:"id"`
	UserID []string            `json:"userId"`
}

type UserResult struct {
	User *db.User `json:"user"`
}

type UsersConnection struct {
	PageInfo *PageInfo              `json:"pageInfo"`
	Edges    []*UsersConnectionEdge `json:"edges"`
}

type UsersConnectionEdge struct {
	Cursor string   `json:"cursor"`
	Node   *db.User `json:"node"`
}

type UsersFilter struct {
	ID []string `json:"id"`
}

type CurrencyEnum string

const (
	CurrencyEnumRub CurrencyEnum = "RUB"
	CurrencyEnumEur CurrencyEnum = "EUR"
	CurrencyEnumUsd CurrencyEnum = "USD"
)

var AllCurrencyEnum = []CurrencyEnum{
	CurrencyEnumRub,
	CurrencyEnumEur,
	CurrencyEnumUsd,
}

func (e CurrencyEnum) IsValid() bool {
	switch e {
	case CurrencyEnumRub, CurrencyEnumEur, CurrencyEnumUsd:
		return true
	}
	return false
}

func (e CurrencyEnum) String() string {
	return string(e)
}

func (e *CurrencyEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrencyEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrencyEnum", str)
	}
	return nil
}

func (e CurrencyEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OfferStateEnum string

const (
	OfferStateEnumCreated               OfferStateEnum = "CREATED"
	OfferStateEnumCancelled             OfferStateEnum = "CANCELLED"
	OfferStateEnumTransferringMoney     OfferStateEnum = "TRANSFERRING_MONEY"
	OfferStateEnumTransferMoneyFailed   OfferStateEnum = "TRANSFER_MONEY_FAILED"
	OfferStateEnumTransferringProduct   OfferStateEnum = "TRANSFERRING_PRODUCT"
	OfferStateEnumTransferProductFailed OfferStateEnum = "TRANSFER_PRODUCT_FAILED"
	OfferStateEnumSucceeded             OfferStateEnum = "SUCCEEDED"
	OfferStateEnumReturningMoney        OfferStateEnum = "RETURNING_MONEY"
	OfferStateEnumReturnMoneyFailed     OfferStateEnum = "RETURN_MONEY_FAILED"
	OfferStateEnumMoneyReturned         OfferStateEnum = "MONEY_RETURNED"
)

var AllOfferStateEnum = []OfferStateEnum{
	OfferStateEnumCreated,
	OfferStateEnumCancelled,
	OfferStateEnumTransferringMoney,
	OfferStateEnumTransferMoneyFailed,
	OfferStateEnumTransferringProduct,
	OfferStateEnumTransferProductFailed,
	OfferStateEnumSucceeded,
	OfferStateEnumReturningMoney,
	OfferStateEnumReturnMoneyFailed,
	OfferStateEnumMoneyReturned,
}

func (e OfferStateEnum) IsValid() bool {
	switch e {
	case OfferStateEnumCreated, OfferStateEnumCancelled, OfferStateEnumTransferringMoney, OfferStateEnumTransferMoneyFailed, OfferStateEnumTransferringProduct, OfferStateEnumTransferProductFailed, OfferStateEnumSucceeded, OfferStateEnumReturningMoney, OfferStateEnumReturnMoneyFailed, OfferStateEnumMoneyReturned:
		return true
	}
	return false
}

func (e OfferStateEnum) String() string {
	return string(e)
}

func (e *OfferStateEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OfferStateEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OfferStateEnum", str)
	}
	return nil
}

func (e OfferStateEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleManager Role = "MANAGER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleManager,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleManager:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionStateEnum string

const (
	TransactionStateEnumCreated    TransactionStateEnum = "CREATED"
	TransactionStateEnumCancelled  TransactionStateEnum = "CANCELLED"
	TransactionStateEnumProcessing TransactionStateEnum = "PROCESSING"
	TransactionStateEnumError      TransactionStateEnum = "ERROR"
	TransactionStateEnumSucceeded  TransactionStateEnum = "SUCCEEDED"
	TransactionStateEnumFailed     TransactionStateEnum = "FAILED"
)

var AllTransactionStateEnum = []TransactionStateEnum{
	TransactionStateEnumCreated,
	TransactionStateEnumCancelled,
	TransactionStateEnumProcessing,
	TransactionStateEnumError,
	TransactionStateEnumSucceeded,
	TransactionStateEnumFailed,
}

func (e TransactionStateEnum) IsValid() bool {
	switch e {
	case TransactionStateEnumCreated, TransactionStateEnumCancelled, TransactionStateEnumProcessing, TransactionStateEnumError, TransactionStateEnumSucceeded, TransactionStateEnumFailed:
		return true
	}
	return false
}

func (e TransactionStateEnum) String() string {
	return string(e)
}

func (e *TransactionStateEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionStateEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionStateEnum", str)
	}
	return nil
}

func (e TransactionStateEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionTypeEnum string

const (
	TransactionTypeEnumDeposit    TransactionTypeEnum = "DEPOSIT"
	TransactionTypeEnumBuy        TransactionTypeEnum = "BUY"
	TransactionTypeEnumFee        TransactionTypeEnum = "FEE"
	TransactionTypeEnumWithdrawal TransactionTypeEnum = "WITHDRAWAL"
)

var AllTransactionTypeEnum = []TransactionTypeEnum{
	TransactionTypeEnumDeposit,
	TransactionTypeEnumBuy,
	TransactionTypeEnumFee,
	TransactionTypeEnumWithdrawal,
}

func (e TransactionTypeEnum) IsValid() bool {
	switch e {
	case TransactionTypeEnumDeposit, TransactionTypeEnumBuy, TransactionTypeEnumFee, TransactionTypeEnumWithdrawal:
		return true
	}
	return false
}

func (e TransactionTypeEnum) String() string {
	return string(e)
}

func (e *TransactionTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionTypeEnum", str)
	}
	return nil
}

func (e TransactionTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserFormStateEnum string

const (
	UserFormStateEnumCreated    UserFormStateEnum = "CREATED"
	UserFormStateEnumModerating UserFormStateEnum = "MODERATING"
	UserFormStateEnumApproved   UserFormStateEnum = "APPROVED"
	UserFormStateEnumDeclained  UserFormStateEnum = "DECLAINED"
)

var AllUserFormStateEnum = []UserFormStateEnum{
	UserFormStateEnumCreated,
	UserFormStateEnumModerating,
	UserFormStateEnumApproved,
	UserFormStateEnumDeclained,
}

func (e UserFormStateEnum) IsValid() bool {
	switch e {
	case UserFormStateEnumCreated, UserFormStateEnumModerating, UserFormStateEnumApproved, UserFormStateEnumDeclained:
		return true
	}
	return false
}

func (e UserFormStateEnum) String() string {
	return string(e)
}

func (e *UserFormStateEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserFormStateEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserFormStateEnum", str)
	}
	return nil
}

func (e UserFormStateEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
