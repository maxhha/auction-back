type Product {
  id: ID!
  # Title of product
  title: String!
  # Product description
  description: String!
  # Current owner of product
  owner: User!
  # Creator of product
  creator: User!
  # Product visibility on market
  isOnMarket: Boolean!
  # The greatest offer
  topOffer: Offer
  # Product images
  images: [ProductImage!]!
  # Offers for this product
  offers(first: Int, after: String): OffersConnection!
}

# Product image
type ProductImage {
  id: ID!
  filename: String!
  path: String!
}

type ProductsConnectionEdge {
  cursor: Cursor!
  node: Product!
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsConnectionEdge!]!
}

extend type Query {
  marketProducts(first: Int, after: String): ProductsConnection!
}

input CreateProductInput {
  name: String!
  description: String
}

type CreateProductResult {
  product: Product!
}

input OfferProductInput {
  productId: ID!
}

type OfferProductResult {
  product: Product!
}

input TakeOffProductInput {
  productId: ID!
}

type TakeOffProductResult {
  product: Product!
}

input SellProductInput {
  productId: ID!
}

type SellProductResult {
  product: Product!
}

extend type Mutation {
  createProduct(input: CreateProductInput!): CreateProductResult!
  offerProduct(input: OfferProductInput!): OfferProductResult!
  takeOffProduct(input: TakeOffProductInput!): TakeOffProductResult!
  sellProduct(input: SellProductInput!): SellProductResult!
}

type Subscription {
  productOffered: Product
}
