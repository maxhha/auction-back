enum ProductState {
  CREATED
  MODERATING
  APPROVED
  DECLAINED
}

type Product {
  id: ID!
  """
  Current state of product
  """
  state: ProductState!
  """
  Title of product
  """
  title: String!
  """
  Product description
  """
  description: String!
  """
  Current owner of product
  """
  owner: User!
  """
  Creator of product
  """
  creator: User!
  """
  The greatest offer
  """
  topOffer: Offer
  """
  Product images
  """
  images: [ProductImage!]!
  """
  Offers for this product
  """
  offers(first: Int, after: String): OffersConnection!
}

"""
Product image
"""
type ProductImage {
  id: ID!
  filename: String!
  path: String!
}

type ProductsConnectionEdge {
  cursor: Cursor!
  node: Product!
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsConnectionEdge!]!
}

input ProductsFilter {
  ownerIDs: [String!] = []
}

extend type Query {
  marketProducts(first: Int, after: String): ProductsConnection!
}

input UpdateProductInput {
  productId: ID!
  title: String!
  description: String!
}

type ProductResult {
  product: Product!
}

input RequestModerateProductInput {
  productId: ID!
}

input OfferProductInput {
  productId: ID!
}

type OfferProductResult {
  product: Product!
}

input TakeOffProductInput {
  productId: ID!
}

type TakeOffProductResult {
  product: Product!
}

input SellProductInput {
  productId: ID!
}

type SellProductResult {
  product: Product!
}

extend type Mutation {
  """
  Creates product with creator of current viewer
  """
  createProduct: ProductResult!
  """
  Update product info
  """
  updateProduct(input: UpdateProductInput!): ProductResult!
  """
  Request token to send product for modetaion
  """
  requestModerateProduct(input: RequestModerateProductInput!): Boolean!
  """
  Set product state to moderating
  """
  approveModerateProduct(input: TokenInput!): ProductResult!

  offerProduct(input: OfferProductInput!): OfferProductResult!
  takeOffProduct(input: TakeOffProductInput!): TakeOffProductResult!
  sellProduct(input: SellProductInput!): SellProductResult!
}

type Subscription {
  productOffered: Product
}
