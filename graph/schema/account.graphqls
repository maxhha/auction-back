"""
Nominal account
"""
interface Account {
  id: ID!
  """
  Bank in which the account was created
  """
  bank: Bank!
  """
  Available moneys
  """
  available: [Money!]!
  """
  Money that is blocked in some offers
  """
  blocked: [Money!]!
  """
  All transactions in which the account is involved
  """
  transactions(
    first: Int
    after: Cursor
    filter: TransactionsFilter = {}
  ): TransactionsConnection!
}

"""
Nominal account that was created for client
"""
type UserAccount implements Account {
  id: ID!
  """
  Bank in which the account was created
  """
  bank: Bank!
  """
  Available moneys
  """
  available: [Money!]!
  """
  Money that is blocked in some offers
  """
  blocked: [Money!]!
  """
  All transactions in which the account is involved
  """
  transactions(
    first: Int
    after: Cursor
    filter: TransactionsFilter = {}
  ): TransactionsConnection!
  """
  Owner of account
  """
  user: User!
}

"""
Special account for banks. Amount on this account is always nonpositve
"""
type BankAccount implements Account {
  id: ID!
  """
  Owner of account. Each bank have one special account
  """
  bank: Bank!
  """
  Available moneys
  """
  available: [Money!]!
  """
  Money that is blocked in some offers
  """
  blocked: [Money!]!
  """
  All transactions in which the account is involved
  """
  transactions(
    first: Int
    after: Cursor
    filter: TransactionsFilter = {}
  ): TransactionsConnection!
}

type AccountsConnectionEdge {
  cursor: Cursor!
  node: Account!
}

type AccountsConnection {
  pageInfo: PageInfo!
  edges: [AccountsConnectionEdge!]!
}

"""
Connection with UserAccount only
"""
type UserAccountsConnectionEdge {
  cursor: Cursor!
  node: UserAccount!
}

type UserAccountsConnection {
  pageInfo: PageInfo!
  edges: [UserAccountsConnectionEdge!]!
}

input AccountsFilter {
  availableFrom: MoneyInput
}

extend type Query {
  """
  All accounts
  """
  accounts(
    first: Int
    after: Cursor
    filter: AccountsFilter = {}
  ): AccountsConnection! @hasRole(role: MANAGER)
}
