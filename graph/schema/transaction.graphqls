enum TransactionState {
  CREATED
  CANCELLED
  PROCESSING
  ERROR
  SUCCEEDED
  FAILED
}

enum TransactionType {
  DEPOSIT
  CURRENCY_CONVERTION
  RETURN
  FEE_RETURN
  BUY
  FEE_BUY
  WITHDRAWAL
  FEE_WITHDRAWAL
}

type Transaction {
  id: ID!
  """
  Time of apply this transaction
  """
  date: DateTime
  """
  Current state
  """
  state: TransactionState!
  """
  Transaction type
  """
  type: TransactionType!
  """
  Transaction currency
  """
  currency: CurrencyEnum!
  """
  Transaction amount
  """
  amount: Float!
  """
  Error message for state = ERROR or FAILED
  """
  error: String
  """
  From account
  """
  accountFrom: Account
  """
  To account
  """
  accountTo: Account
  """
  Related offer
  """
  offer: Offer
}

type TransactionsConnectionEdge {
  cursor: Cursor!
  node: Transaction!
}

type TransactionsConnection {
  pageInfo: PageInfo!
  edges: [TransactionsConnectionEdge!]!
}

input TransactionsFilter {
  IDs: [ID!] = []
  dateRange: DateTimeRange = {}
  states: [TransactionState!] = []
  types: [TransactionType!] = []
  currencies: [CurrencyEnum!] = []
  accountFormIDs: [ID!] = []
  accountToIDs: [ID!] = []
  offerIDs: [ID!] = []
}

extend type Query {
  """
  All transactions
  """
  transactions(
    first: Int
    after: Cursor
    filter: TransactionsFilter = {}
  ): TransactionsConnection @hasRole(role: MANAGER)
}
