type User {
  id: ID!
  """User current personal information"""
  form: UserFormFilled
  """User new personal information"""
  draftForm: UserForm
  """User history of personal information (only for managers)"""
  formHistory(first: Int, after: Cursor): UserFormsConnection!
  """End date of blocking this user"""
  blockedUntil: DateTime
  """Available moneys"""
  available: [Money!]!
  """Money that is blocked in some offers"""
  blocked: [Money!]!
  """User accounts"""
  accounts(first: Int, after: Cursor): UserAccountsConnection!
  """User offers"""
  offers(first: Int, after: Cursor): OffersConnection!
  """User products in which he is owner"""
  products(first: Int, after: Cursor): ProductsConnection!
}


type UsersConnectionEdge {
  cursor: Cursor!
  node: User!
}

type UsersConnection {
  pageInfo: PageInfo!
  edges: [UsersConnectionEdge!]!
}

extend type Query {
  viewer: User
}

type UserResult {
  user: User!
}

input RequestSetUserEmailInput {
  email: String!
}

input RequestSetUserPhoneInput {
  phone: String!
}

input UpdateUserPasswordInput {
  oldPassword: String
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

extend type Mutation {
  """Registrates empty user"""
  register: TokenResult!
  """User login"""
  login(input: LoginInput): TokenResult!

  """Request set user email"""
  requestSetUserEmail(input: RequestSetUserEmailInput): Boolean!
  """Request set user email"""
  requestSetUserPhone(input: RequestSetUserPhoneInput): Boolean!
  """First input of users email"""
  approveSetUserEmail(input: TokenInput): UserResult!
  """First input of users"""
  approveSetUserPhone(input: TokenInput): UserResult!
  """Update user password using old password"""
  updateUserPassword(input: UpdateUserPasswordInput): UserResult!
}
