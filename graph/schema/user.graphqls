type User {
  id: ID!
  # User email
  email: String!
  # User phone
  phone: String!
  # User name
  name: String!
  # End date of blocking this user
  blockedUntil: DateTime
  # Flag of admin
  isAdmin: Boolean!
  # Available moneys
  available: [Money!]!
  # Money that is blocked in some offers
  blocked: [Money!]!
  # User accounts
  accounts(first: Int, after: Cursor): UserAccountsConnection!
  # User offers
  offers(first: Int, after: Cursor): OffersConnection!
  # User products in which he is owner
  products(first: Int, after: Cursor): ProductsConnection!
}

type UsersConnectionEdge {
  cursor: Cursor!
  node: User!
}

type UsersConnection {
  pageInfo: PageInfo!
  edges: [UsersConnectionEdge!]!
}

extend type Query {
  viewer: User
}

type RegisterResult {
  token: String!
}

input IncreaseBalanceInput {
  userId: ID!
  amount: Float!
}

type IncreaseBalanceResult {
  user: User!
}

extend type Mutation {
  register: RegisterResult!
  increaseBalance(input: IncreaseBalanceInput!): IncreaseBalanceResult!
}
