version: '3'
# https://taskfile.dev/#/installation

tasks:
  gqlgen:
    desc: Generate code for GraphQL schema
    cmds:
      - go run github.com/99designs/gqlgen generate
    sources:
      - gqlgen.yml
      - db/**/*.resolvers.go
      - graph/*.go
      - graph/model/**/*.go
      - graph/schema/**/*.graphqls
    generates:
      - graph/generated/generated.go
      - graph/model/models_gen.go

  grpcgen:
    desc: Generate code for grpc
    cmds:
      - PATH=$PATH:$(go env GOPATH)/bin protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative grpc/**/*.proto
    sources:
      - grpc/**/*.proto
    generates:
      - grpc/**/*.pb.go

  build:mock_notifier:
    desc: Builds image of mock_notifier service
    sources:
      - grpc/notifier/*.go
      - services/mock_notifier/*
    vars:
      ENV: prod
    cmds:
      - docker-compose build mock-notifier-{{.ENV}}

  dev:
    desc: Start dev server
    deps:
      - task: build:mock_notifier
        vars:
          ENV: dev
    env:
      SERVER_DOTENV: .server-dev.env
    cmds: 
      - docker-compose --profile dev up -d
      - defer: docker-compose --profile dev stop
      - docker logs -f auction-mock-notifier-dev-1 &
      - air
  
  dir:out:
    desc: Creates out directiory
    cmds:
      - mkdir -p out
    status:
      - test -d out
  
  filter-cover:
    desc: Filters generated files from coverage output
    cmds:
      - cat {{.IN}} | grep -v "_gen.go\|_suite.go\|generated.go\|.pb.go" > {{.OUT}}

  test:unit:
    desc: Get code coverage by unit tests
    deps:
      - dir:out
    vars:
      TMPOUT: ./out/unit-coverage.tmp.out
      OUT: ./out/unit-coverage.out
      HTML: ./out/unit-coverage.html
    cmds:
      - go test -coverprofile={{.TMPOUT}} ./...
      # remove generated code from coverage
      - task: filter-cover
        vars:
          IN: "{{.TMPOUT}}"
          OUT: "{{.OUT}}"
      - go tool cover -html={{.OUT}} -o {{.HTML}}
      - go tool cover -func={{.OUT}}

  test:it:
    desc: Get code coverage by integration tests
    deps:
      - dir:out
      - task: build:mock_notifier
        vars:
          ENV: test
    env:
      SERVER_DOTENV: .server-test.env
      GIN_MODE: debug
    vars:
      TMPOUT: ./out/it-coverage.tmp.out
      OUT: ./out/it-coverage.out
      HTML: ./out/it-coverage.html
    cmds:
      - docker-compose --profile test up --force-recreate -d
      - defer: docker-compose --profile test down
      - go test -tags=integration -coverprofile={{.TMPOUT}} -coverpkg="auction-back/..." 
      - task: filter-cover
        vars:
          IN: "{{.TMPOUT}}"
          OUT: "{{.OUT}}"
      - go tool cover -html={{.OUT}} -o {{.HTML}}
      - go tool cover -func={{.OUT}}
  
  test:all:
    desc: Get total code coverage by all tests
    deps:
      - test:unit
      - test:it
    vars:
      OUT: ./out/total-coverage.out
      HTML: ./out/total-coverage.html
    cmds:
      - >
        echo "mode: set" > {{.OUT}} &&
        cat ./out/*-coverage.out |
        grep -v mode: |
        sort -r |
        awk '{if($1 != last) {print $0;last=$1}}' >> {{.OUT}}
      - go tool cover -html={{.OUT}} -o {{.HTML}}
      - go tool cover -func={{.OUT}}
